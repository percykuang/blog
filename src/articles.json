[
  {
    "id": "70302818",
    "title": "如何编写一个 Webpack Loader copy 3",
    "date": "2025-03-15",
    "tags": [
      "typescript",
      "webpack"
    ],
    "fileName": "如何编写一个 Webpack Loader copy 3.md",
    "content": "\n> 在平时自己由零搭建项目时，虽然基础配置都比较熟悉，比如配置 file-loader, url-loader, css-loader 等，配置不难，但究竟是怎么起作用的呢，今天就来说说如何编写一个 Webpack Loader。\n\n# Loader 作用\n\n按我自己的简单理解，loader 通常指打包的方案，即按什么方式来处理打包，打包的时候它可以拿到模块源代码，`经过特定 loader 的转换`后返回新的结果。\n\n## 水果列表\n\n- 苹果\n- 香蕉\n- 橙子\n- 草莓\n- 葡萄\n- 西瓜\n- 芒果\n\n~~比如 sass-loader 可以把 SCSS 代码转换成 CSS 代码~~\n\n```js\nimport { FC, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { marked } from 'marked';\nimport articleList from '../articles.json';\nimport { Article } from '../types';\nimport dayjs from 'dayjs';\n\nmarked.setOptions({\n  breaks: true, // 允许回车换行\n  gfm: true, // 启用 GitHub Flavored Markdown\n});\n\nconst Detail: FC = () => {\n  const params = useParams();\n  const [article, setArticle] = useState<Article>();\n\n  console.log('params', params, article?.content);\n\n  useEffect(() => {\n    const record = articleList.find((item) => item.id === params.id);\n    setArticle(record);\n  }, [params]);\n\n  if (!article) {\n    return <div>404</div>;\n  }\n\n  return (\n    <div className=\"mt-8\">\n      <h1 className=\"my-6 text-3xl font-bold\">{article.title}</h1>\n      <div className=\"mb-4 text-sm text-stone-400\">{`Updated at ${dayjs(article.date).format('YYYY.MM.DD')}`}</div>\n      <article\n        className=\"prose prose-stone lg:prose-lg dark:prose-invert prose-headings:font-bold prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg prose-a:text-blue-600 prose-code:text-blue-600 prose-pre:bg-gray-100 prose-pre:p-4 prose-pre:rounded-lg prose-img:rounded-lg max-w-none\"\n        dangerouslySetInnerHTML={{\n          __html: marked.parse(article.content),\n        }}\n      ></article>\n      <footer></footer>\n    </div>\n  );\n};\n\nexport default Detail;\n```\n"
  },
  {
    "id": "593848798",
    "title": "如何编写一个 Webpack Loader",
    "date": "2025-02-15",
    "tags": [
      "react",
      "typescript"
    ],
    "fileName": "如何编写一个 Webpack Loader.md",
    "content": "\n> 在平时自己由零搭建项目时，虽然基础配置都比较熟悉，比如配置 file-loader, url-loader, css-loader 等，配置不难，但究竟是怎么起作用的呢，今天就来说说如何编写一个 Webpack Loader。\n\n# Loader 作用\n\n按我自己的简单理解，loader 通常指打包的方案，即按什么方式来处理打包，打包的时候它可以拿到模块源代码，经过特定 loader 的转换后返回新的结果。\n比如 sass-loader 可以把 SCSS 代码转换成 CSS 代码\n"
  },
  {
    "id": "199296048",
    "title": "如何编写一个 Webpack Loader copy 2",
    "date": "2024-02-15",
    "tags": [
      "webpack"
    ],
    "fileName": "如何编写一个 Webpack Loader copy 2.md",
    "content": "\n> 在平时自己由零搭建项目时，虽然基础配置都比较熟悉，比如配置 file-loader, url-loader, css-loader 等，配置不难，但究竟是怎么起作用的呢，今天就来说说如何编写一个 Webpack Loader。\n\n# Loader 作用\n\n按我自己的简单理解，loader 通常指打包的方案，即按什么方式来处理打包，打包的时候它可以拿到模块源代码，经过特定 loader 的转换后返回新的结果。\n比如 sass-loader `可以把 SCSS 代码转换成 CSS 代码`\n"
  },
  {
    "id": "176010091",
    "title": "如何编写一个 Webpack Loader copy",
    "date": "2023-02-15",
    "tags": [
      "webpack"
    ],
    "fileName": "如何编写一个 Webpack Loader copy.md",
    "content": "\n> 在平时自己由零搭建项目时，虽然基础配置都比较熟悉，比如配置 file-loader, url-loader, css-loader 等，配置不难，但究竟是怎么起作用的呢，今天就来说说如何编写一个 Webpack Loader。\n\n# Loader 作用\n\n按我自己的简单理解，loader 通常指打包的方案，即按什么方式来处理打包，打包的时候它可以拿到模块源代码，经过特定 loader 的转换后返回新的结果。\n比如 sass-loader 可以把 SCSS 代码转换成 CSS 代码\n"
  }
]